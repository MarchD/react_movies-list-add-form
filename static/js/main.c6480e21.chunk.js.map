{"version":3,"sources":["components/MovieCard/MovieCard.js","components/MoviesList/MoviesList.js","components/NewMovie/NewMovie.js","App.js","index.js"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","defaultProps","MoviesList","movies","map","movie","key","imdbId","NewMovie","state","errors","isDisabled","checkingToEmpty","fields","forEach","field","setState","handleChangeUrl","target","name","value","test","handleChange","handleSubmit","e","preventDefault","newMovie","valuesOfMovie","Object","entries","some","props","onAdd","this","onSubmit","htmlFor","placeholder","id","type","onChange","disabled","Component","App","moviesFromServer","addMovie","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c6480e21.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './MovieCard.scss';\n\nexport const MovieCard = ({ title, description, imgUrl, imdbUrl }) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n\nMovieCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  imgUrl: PropTypes.string.isRequired,\n  imdbUrl: PropTypes.string.isRequired,\n};\n\nMovieCard.defaultProps = {\n  description: '',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\nexport const MoviesList = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      description: PropTypes.string,\n      imgUrl: PropTypes.string.isRequired,\n      imdbUrl: PropTypes.string.isRequired,\n    }),\n  ),\n};\n\nMoviesList.defaultProps = {\n  movies: [],\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './NewMovie.scss';\n\nexport class NewMovie extends Component {\n  state = {\n    title: '',\n    description: '',\n    imgUrl: '',\n    imdbUrl: '',\n    imdbId: '',\n    errors: {\n      title: false,\n      imdbId: false,\n      imgUrl: false,\n      imdbUrl: false,\n      isDisabled: false,\n    },\n  };\n\n  checkingToEmpty = (fields) => {\n    fields.forEach((field) => {\n      if (!field[1] && field[0] !== 'description') {\n        this.setState(state => ({\n          errors: {\n            ...state.errors,\n            isDisabled: true,\n            [field[0]]: true,\n          },\n        }));\n      }\n    });\n  }\n\n  handleChangeUrl = ({ target }) => {\n    // eslint-disable-next-line max-len\n    const valid = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@.\\w_]*)#?(?:[.!/\\\\\\w]*))?)$/;\n    const { name, value } = target;\n\n    !valid.test(value)\n      ? this.setState(state => ({ errors: {\n        ...state.errors, [name]: true,\n      } }))\n      : this.setState(state => ({ errors: {\n        ...state.errors, [name]: false,\n      } }));\n\n    this.setState({ [name]: value });\n  }\n\n  handleChange = ({ target }) => {\n    const { name, value } = target;\n\n    if (!value) {\n      this.setState(state => ({ errors: {\n        ...state.errors, isDisabled: true, [name]: true,\n      } }));\n    }\n\n    this.setState(this.setState(state => ({ errors: {\n      ...state.errors, isDisabled: false, [name]: false,\n    } })));\n\n    this.setState({ [name]: value });\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    const { title, description, imdbId, imdbUrl, imgUrl } = this.state;\n    const newMovie = {\n      title,\n      description,\n      imdbId,\n      imdbUrl,\n      imgUrl,\n    };\n\n    const valuesOfMovie = Object.entries(newMovie);\n\n    if (valuesOfMovie.some(field => !field[1] && field[0] !== 'description')) {\n      this.checkingToEmpty(valuesOfMovie);\n\n      return;\n    }\n\n    this.props.onAdd(newMovie);\n    this.setState({\n      title: '',\n      description: '',\n      imgUrl: '',\n      imdbUrl: '',\n      imdbId: '',\n    });\n  }\n\n  render() {\n    const { title,\n      description, imgUrl, imdbUrl, imdbId, errors } = this.state;\n\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label htmlFor=\"title\">\n          Title:\n          {errors.title && <span>Title is required</span>}\n          <input\n            placeholder=\"...\"\n            id=\"title\"\n            name=\"title\"\n            className={errors.title ? 'red' : ''}\n            type=\"text\"\n            value={title}\n            onChange={this.handleChange}\n          />\n        </label>\n\n        <label htmlFor=\"description\">\n          Description:\n          <input\n            placeholder=\"...\"\n            id=\"description\"\n            name=\"description\"\n            type=\"text\"\n            value={description}\n            onChange={this.handleChange}\n          />\n        </label>\n\n        <label htmlFor=\"imgUrl\">\n          Link to poster:\n          {errors.imgUrl && <span>Invalid link</span>}\n          <input\n            placeholder=\"...\"\n            id=\"imgUrl\"\n            name=\"imgUrl\"\n            className={errors.imgUrl ? 'red' : ''}\n            type=\"text\"\n            value={imgUrl}\n            onChange={this.handleChangeUrl}\n          />\n        </label>\n\n        <label htmlFor=\"imdbUrl\">\n          Link to IMDb:\n          {errors.imdbUrl && <span>Invalid link</span>}\n          <input\n            placeholder=\"...\"\n            id=\"imdbUrl\"\n            name=\"imdbUrl\"\n            className={errors.imdbUrl ? 'red' : ''}\n            type=\"text\"\n            value={imdbUrl}\n            onChange={this.handleChangeUrl}\n          />\n        </label>\n\n        <label htmlFor=\"imdbId\">\n          Id:\n          {errors.imdbId && <span>Id is required</span>}\n          <input\n            placeholder=\"...\"\n            id=\"imdbId\"\n            name=\"imdbId\"\n            className={errors.imdbId ? 'red' : ''}\n            type=\"text\"\n            value={imdbId}\n            onChange={this.handleChange}\n          />\n        </label>\n\n        <button type=\"submit\" disabled={errors.isDisabled}>Add film</button>\n      </form>\n    );\n  }\n}\n\nNewMovie.propTypes = {\n  onAdd: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\n\nexport class App extends Component {\n  state = {\n    movies: moviesFromServer,\n  };\n\n  addMovie = (movie) => {\n    this.setState(state => ({\n      movies: [...state.movies, movie],\n    }));\n  };\n\n  render() {\n    const { movies } = this.state;\n\n    return (\n      <div className=\"page\">\n        <div className=\"page-content\">\n          <MoviesList movies={movies} />\n        </div>\n        <div className=\"sidebar\">\n          <NewMovie onAdd={this.addMovie} />\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}